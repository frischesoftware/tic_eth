// Factory "morphs" into a Pudding class.
// The reasoning is that calling load in each context
// is cumbersome.

(function() {

  var contract_data = {
    abi: [{"constant":true,"inputs":[{"name":"x","type":"uint8"}],"name":"getValue","outputs":[{"name":"","type":"uint8"}],"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"currentPlayer","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"feld","type":"uint8"},{"name":"addr","type":"address"}],"name":"move","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"player2","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":false,"inputs":[{"name":"incoming","type":"uint8[9]"}],"name":"setArray","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"getArraySettingResult","outputs":[{"name":"","type":"int8"}],"type":"function"},{"constant":false,"inputs":[{"name":"playernr","type":"uint256"},{"name":"addr","type":"address"}],"name":"setActivePlayer","outputs":[],"type":"function"},{"constant":true,"inputs":[],"name":"player1","outputs":[{"name":"","type":"address"}],"type":"function"},{"constant":true,"inputs":[],"name":"getArray","outputs":[{"name":"","type":"uint8[9]"}],"type":"function"},{"inputs":[],"type":"constructor"}],
    binary: "6060604052600080547409000000000000000000000000000000000000000060a060020a60ff02199091161790556002805460ff191660ff17905560035460048054600160a060020a031916600160a060020a039092169190911790556103aa8061006a6000396000f3606060405236156100825760e060020a6000350463181be00d811461008457806341c0e1b5146100b65780634404a438146100de57806344596ca6146100f057806359a5f12d1461018d578063b37906761461019f578063b8c86aa614610245578063cc60e57a14610252578063d30895e4146102b6578063d504ea1d146102ce575b005b61033f6004356000600160ff83166009811015610002576020808204909201549190066101000a900460ff1692915050565b61008260005433600160a060020a03908116911614156103a857600054600160a060020a0316ff5b610349600454600160a060020a031681565b610082600435602435600254600160a060020a038281166101009092041614156101435760018060ff841660098110156100025760208082049092019190066101000a81548160ff021916908302179055505b600354600160a060020a0390811690821614156102b2576002600160ff841660098110156100025760208082049092019190066101000a81548160ff021916908302179055505050565b610349600354600160a060020a031681565b610180604052610082600461012460608260098282610120808284375090955050505050506002805460ff1916905560005b60005474010000000000000000000000000000000000000000900460ff908116908216101561039657818160ff166009811015610002576020020151600160ff8316600981101561000257602080820483018054919092066101000a60ff81021991909116930292909217909155016101d1565b61035c60025460000b5b90565b6100826004356024358160011415610289576002805474ffffffffffffffffffffffffffffffffffffffff00191661010083021790555b81600214156102b2576003805473ffffffffffffffffffffffffffffffffffffffff1916821790555b5050565b610349600254600160a060020a036101009091041681565b61037361018060405260606009815b60008152602001906001900390816102dd5750506040805161012081019182905290600190600990826000855b825461010083900a900460ff168152602091860182810493840193870302910180841161030a5790505050505050905061024f565b6060908152602090f35b600160a060020a03166060908152602090f35b6040805160009290920b8252519081900360200190f35b60405180826101208083818460006004608af15090500191505060405180910390f35b6002805460ff191660011790556102b2565b56",
    unlinked_binary: "6060604052600080547409000000000000000000000000000000000000000060a060020a60ff02199091161790556002805460ff191660ff17905560035460048054600160a060020a031916600160a060020a039092169190911790556103aa8061006a6000396000f3606060405236156100825760e060020a6000350463181be00d811461008457806341c0e1b5146100b65780634404a438146100de57806344596ca6146100f057806359a5f12d1461018d578063b37906761461019f578063b8c86aa614610245578063cc60e57a14610252578063d30895e4146102b6578063d504ea1d146102ce575b005b61033f6004356000600160ff83166009811015610002576020808204909201549190066101000a900460ff1692915050565b61008260005433600160a060020a03908116911614156103a857600054600160a060020a0316ff5b610349600454600160a060020a031681565b610082600435602435600254600160a060020a038281166101009092041614156101435760018060ff841660098110156100025760208082049092019190066101000a81548160ff021916908302179055505b600354600160a060020a0390811690821614156102b2576002600160ff841660098110156100025760208082049092019190066101000a81548160ff021916908302179055505050565b610349600354600160a060020a031681565b610180604052610082600461012460608260098282610120808284375090955050505050506002805460ff1916905560005b60005474010000000000000000000000000000000000000000900460ff908116908216101561039657818160ff166009811015610002576020020151600160ff8316600981101561000257602080820483018054919092066101000a60ff81021991909116930292909217909155016101d1565b61035c60025460000b5b90565b6100826004356024358160011415610289576002805474ffffffffffffffffffffffffffffffffffffffff00191661010083021790555b81600214156102b2576003805473ffffffffffffffffffffffffffffffffffffffff1916821790555b5050565b610349600254600160a060020a036101009091041681565b61037361018060405260606009815b60008152602001906001900390816102dd5750506040805161012081019182905290600190600990826000855b825461010083900a900460ff168152602091860182810493840193870302910180841161030a5790505050505050905061024f565b6060908152602090f35b600160a060020a03166060908152602090f35b6040805160009290920b8252519081900360200190f35b60405180826101208083818460006004608af15090500191505060405180910390f35b6002805460ff191660011790556102b2565b56",
    address: "0xd0c241254576dc0daae70edbbb7acfdf9f3a8cb4",
    generated_with: "2.0.6",
    contract_name: "Board"
  };

  function Contract() {
    if (Contract.Pudding == null) {
      throw new Error("Board error: Please call load() first before creating new instance of this contract.");
    }

    Contract.Pudding.apply(this, arguments);
  };

  Contract.load = function(Pudding) {
    Contract.Pudding = Pudding;

    Pudding.whisk(contract_data, Contract);

    // Return itself for backwards compatibility.
    return Contract;
  }

  Contract.new = function() {
    if (Contract.Pudding == null) {
      throw new Error("Board error: Please call load() first before calling new().");
    }

    return Contract.Pudding.new.apply(Contract, arguments);
  };

  Contract.at = function() {
    if (Contract.Pudding == null) {
      throw new Error("Board error: lease call load() first before calling at().");
    }

    return Contract.Pudding.at.apply(Contract, arguments);
  };

  Contract.deployed = function() {
    if (Contract.Pudding == null) {
      throw new Error("Board error: Please call load() first before calling deployed().");
    }

    return Contract.Pudding.deployed.apply(Contract, arguments);
  };

  if (typeof module != "undefined" && typeof module.exports != "undefined") {
    module.exports = Contract;
  } else {
    // There will only be one version of Pudding in the browser,
    // and we can use that.
    window.Board = Contract;
  }

})();
